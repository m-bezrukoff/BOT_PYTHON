import json

#сохранить в json
with open('data.json', 'w', encoding='utf-8') as fh: #открываем файл на запись
    fh.write(json.dumps(data, ensure_ascii=False)) #преобразовываем словарь data в unicode-строку и записываем в файл

#загрузить из json
with open('data.json', 'r', encoding='utf-8') as fh: #открываем файл на чтение
    data = json.load(fh) #загружаем из файла данные в словарь data
	
	
	I use just websocket library and subscribe to websocket link myself, no API's, raw data..

So the columns for orders are

messageType -> t/trade, o/order

tradeID -> only for trades, just a number

orderType -> 1/bid,0/ask
rate
amount
time
sequence

148 is code for BTCETH, yeah there is no documentation.. but when trades occur You can figure out.
Bid is always 1, cause You add something open_session..


канал 1002

[148, '0.03293475', '0.03293475', '0.03293133', '-0.00575210', '458.17816884', '13938.22879131', 0, '0.03330500', '0.03242416']
pair    rate         ask rate      bid rate        change          volume         24hr Volume   ???  24hr High      24hr Low    


pairs[all_pairs_by_id[json_msg[2][0]]].rate = json_msg[2][1]
pairs[all_pairs_by_id[json_msg[2][0]]].ask_rate = json_msg[2][2]
pairs[all_pairs_by_id[json_msg[2][0]]].bid_rate = json_msg[2][3]
pairs[all_pairs_by_id[json_msg[2][0]]].change = json_msg[2][4]
pairs[all_pairs_by_id[json_msg[2][0]]].volume = json_msg[2][5]
pairs[all_pairs_by_id[json_msg[2][0]]].day_volume = json_msg[2][6]
pairs[all_pairs_by_id[json_msg[2][0]]].day_high_rate = json_msg[2][8]
pairs[all_pairs_by_id[json_msg[2][0]]].day_low_rate = json_msg[2][9]


1001 = trollbox (you will get nothing but a heartbeat)
1002 = ticker
1003 = base return_by_coin 24h volume stats
1010 = heartbeat
'MARKET_PAIR' = market order books


def log(ex):
    try:
        res = return ex
    except Exception as err:
        print('ERROR ', err)



		
		
S = 'str'; S = "str"; S = '''str'''; S = """str"""	Литералы строк
S = "s\np\ta\nbbb"	Экранированные последовательности
S = r"C:\temp\open_session"	Неформатированные строки (подавляют экранирование)
S = b"byte"	Строка байтов
S1 + S2	Конкатенация (сложение строк)
S1 * 3	Повторение строки
S[i]	Обращение по индексу
S[i:j:step]	Извлечение среза
len(S)	Длина строки
S.find(str, [start],[end])	Поиск подстроки в строке. Возвращает номер первого вхождения или -1
S.rfind(str, [start],[end])	Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
S.index(str, [start],[end])	Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
S.rindex(str, [start],[end])	Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
S.replace(шаблон, замена)	Замена шаблона
S.split(символ)	Разбиение строки по разделителю
S.isdigit()	Состоит ли строка из цифр
S.isalpha()	Состоит ли строка из букв
S.isalnum()	Состоит ли строка из цифр или букв
S.islower()	Состоит ли строка из символов в нижнем регистре
S.isupper()	Состоит ли строка из символов в верхнем регистре
S.isspace()	Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
S.istitle()	Начинаются ли слова в строке с заглавной буквы
S.upper()	Преобразование строки к верхнему регистру
S.lower()	Преобразование строки к нижнему регистру
S.startswith(str)	Начинается ли строка S с шаблона str
S.endswith(str)	Заканчивается ли строка S шаблоном str
S.join(список)	Сборка строки из списка с разделителем S
ord(символ)	Символ в его код ASCII
chr(число)	Код ASCII в символ
S.capitalize()	Переводит первый символ строки в верхний регистр, а все остальные в нижний
S.center(width, [fill])	Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
S.count(str, [start],[end])	Возвращает количество непересекающихся вхождений подстроки в диапазоне [начало, конец] (0 и длина строки по умолчанию)
S.expandtabs([tabsize])	Возвращает копию строки, в которой все символы табуляции заменяются одним или несколькими пробелами, в зависимости от текущего столбца. Если TabSize не указан, размер табуляции полагается равным 8 пробелам
S.lstrip([chars])	Удаление пробельных символов в начале строки
S.rstrip([chars])	Удаление пробельных символов в конце строки
S.strip([chars])	Удаление пробельных символов в начале и в конце строки
S.partition(шаблон)	Возвращает кортеж, содержащий часть перед первым шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий саму строку, а затем две пустых строки
S.rpartition(sep)	Возвращает кортеж, содержащий часть перед последним шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий две пустых строки, а затем саму строку
S.swapcase()	Переводит символы нижнего регистра в верхний, а верхнего – в нижний
S.title()	Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
S.zfill(width)	Делает длину строки не меньшей width, по необходимости заполняя первые символы нулями
S.ljust(width, fillchar=" ")	Делает длину строки не меньшей width, по необходимости заполняя последние символы символом fillchar
S.rjust(width, fillchar=" ")	Делает длину строки не меньшей width, по необходимости заполняя первые символы символом fillchar


l = [[11111111111,4.22,333], [11111111112,3.33,444], [11111111113,0.44,99]]
def sorty(i):
    return i[2]

print(l)
l.sort(key=sorty)
print(l)


Done! Congratulations on your open_session bot. You will find it at t.me/maxb_poloniex_bot. You can now add
a description, about section and profile picture for your bot, see /help for a list of commands. 
By the way, when you've finished creating your cool bot, ping our Bot Support if you want a better username for it. 
Just make sure the bot is fully operational before you do this.

Use this token to access the HTTP API:
791062433:AAHEl70dDKrJrLYFJUI2-bZDo6FvsHDR25o
Keep your token secure and store it safely, it can be used by anyone to control your bot.

For a description of the Bot API, see this page: https://core.telegram.org/bots/api


{key: value for key, value in a.__dict__.items() if not key.startswith("__")}
[print (att, getattr(a,att)) for att in dir(a) if not att.startswith("__")]



for x in range(1, 10):
    if x < 9:
        if x > 5:
            B.append(x+1)
        else:
            if x == 1:
                B.append(x+2)
            else:
                B.append(x+3)

B = [x+1 if x > 5 else x+2 if x == 1 else x+3 for x in range(1, 10) if x < 9]

for x in range(1, 10):
    if x < 9:
        for y in range(x+1):
            if x == y:
                B.append((x+2, y+2))

B = [(x+2, y+2) for x in range(1, 10) if x < 9 for y in range(x+1) if x == y]

def f12(seq):
    # уникальные значения списка с сохранением порядка
    # https://twitter.com/raymondh/status/944125570534621185
    return list(dict.fromkeys(seq))

	
def f7(seq):
    # уникальные значения списка без сохранения порядка
    return list(set(seq))

	
	ValueError IndexError
	
Лучший метод удаления дубликатов в списке словарей
self.data = list({i['id']: i for i in self.data}.values())   # удаляем дубликаты
	